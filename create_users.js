// Script para criar usu√°rios diretamente no Supabase
// Execute este arquivo com: node create_users.js

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Chave de servi√ßo, n√£o anon

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL ou SUPABASE_SERVICE_ROLE_KEY n√£o encontradas');
    console.log('Configure as vari√°veis de ambiente primeiro');
    process.exit(1);
}

// Cliente Supabase com chave de servi√ßo (admin)
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

// Usu√°rios para criar
const users = [
    {
        email: 'thiago@maffeng.com',
        password: 'TMS@2025!',
        name: 'Thiago Mafra',
        role: 'admin'
    },
    {
        email: 'ygor@maffeng.com',
        password: 'TMS@2025!',
        name: 'Ygor Mafra',
        role: 'admin'
    },
    {
        email: 'user@maffeng.com',
        password: 'TMS@2025!',
        name: 'Usu√°rio Gerente',
        role: 'gerente'
    },
    {
        email: 'mikaelly@maffeng.com',
        password: 'TMS@2025!',
        name: 'Mikaelly',
        role: 'gerente'
    }
];

async function createUsers() {
    console.log('üöÄ Iniciando cria√ß√£o de usu√°rios...');
    
    for (const userData of users) {
        try {
            console.log(`\nüìß Criando usu√°rio: ${userData.email}`);
            
            // Criar usu√°rio usando Admin API
            const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
                email: userData.email,
                password: userData.password,
                email_confirm: true, // Confirmar email automaticamente
                user_metadata: {
                    name: userData.name
                }
            });

            if (authError) {
                if (authError.message.includes('already registered')) {
                    console.log(`‚ö†Ô∏è  Usu√°rio ${userData.email} j√° existe, pulando...`);
                    continue;
                } else {
                    console.error(`‚ùå Erro ao criar auth user ${userData.email}:`, authError.message);
                    continue;
                }
            }

            console.log(`‚úÖ Usu√°rio auth criado: ${authUser.user.id}`);

            // Criar perfil do usu√°rio
            const { data: profile, error: profileError } = await supabase
                .from('user_profiles')
                .upsert({
                    id: authUser.user.id,
                    email: userData.email,
                    name: userData.name,
                    role: userData.role
                }, {
                    onConflict: 'id'
                });

            if (profileError) {
                console.error(`‚ùå Erro ao criar perfil ${userData.email}:`, profileError.message);
            } else {
                console.log(`‚úÖ Perfil criado para ${userData.email} (${userData.role})`);
            }

        } catch (error) {
            console.error(`‚ùå Erro inesperado para ${userData.email}:`, error.message);
        }
    }

    console.log('\nüéâ Processo de cria√ß√£o de usu√°rios conclu√≠do!');
    
    // Verificar usu√°rios criados
    await verifyUsers();
}

async function verifyUsers() {
    console.log('\nüîç Verificando usu√°rios criados...');
    
    try {
        const { data: profiles, error } = await supabase
            .from('user_profiles')
            .select('*')
            .order('created_at');

        if (error) {
            console.error('‚ùå Erro ao verificar usu√°rios:', error.message);
            return;
        }

        if (profiles && profiles.length > 0) {
            console.log('\nüìã Usu√°rios encontrados:');
            profiles.forEach(profile => {
                console.log(`   ‚Ä¢ ${profile.email} - ${profile.name} (${profile.role})`);
            });
        } else {
            console.log('‚ùå Nenhum usu√°rio encontrado na tabela user_profiles');
        }

        // Verificar Auth users
        const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
        
        if (!authError && authUsers) {
            console.log(`\nüîê Total de usu√°rios Auth: ${authUsers.users.length}`);
        }

    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o:', error.message);
    }
}

async function main() {
    try {
        console.log('üéØ TMS Dashboard - Criador de Usu√°rios');
        console.log('=====================================');
        
        // Testar conex√£o
        const { data, error } = await supabase.from('user_profiles').select('count').limit(1);
        
        if (error) {
            console.error('‚ùå Erro de conex√£o com Supabase:', error.message);
            console.log('\nüí° Dicas para resolver:');
            console.log('1. Verifique se as vari√°veis SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o corretas');
            console.log('2. Execute o SQL de corre√ß√£o de permiss√µes (supabase_fix.sql)');
            console.log('3. Certifique-se que a tabela user_profiles existe');
            return;
        }

        console.log('‚úÖ Conex√£o com Supabase OK');
        
        await createUsers();
        
    } catch (error) {
        console.error('‚ùå Erro fatal:', error.message);
    }
}

// Executar script
if (require.main === module) {
    main();
}

module.exports = { createUsers, verifyUsers };